// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/can.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BootstrapService_AddNode_FullMethodName        = "/proto.BootstrapService/addNode"
	BootstrapService_RemoveNode_FullMethodName     = "/proto.BootstrapService/removeNode"
	BootstrapService_FindActiveNode_FullMethodName = "/proto.BootstrapService/findActiveNode"
)

// BootstrapServiceClient is the client API for BootstrapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BootstrapServiceClient interface {
	AddNode(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*IPAddress, error)
	RemoveNode(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*Bool, error)
	FindActiveNode(ctx context.Context, in *AddressList, opts ...grpc.CallOption) (*IPAddress, error)
}

type bootstrapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBootstrapServiceClient(cc grpc.ClientConnInterface) BootstrapServiceClient {
	return &bootstrapServiceClient{cc}
}

func (c *bootstrapServiceClient) AddNode(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*IPAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAddress)
	err := c.cc.Invoke(ctx, BootstrapService_AddNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) RemoveNode(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, BootstrapService_RemoveNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bootstrapServiceClient) FindActiveNode(ctx context.Context, in *AddressList, opts ...grpc.CallOption) (*IPAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAddress)
	err := c.cc.Invoke(ctx, BootstrapService_FindActiveNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BootstrapServiceServer is the server API for BootstrapService service.
// All implementations must embed UnimplementedBootstrapServiceServer
// for forward compatibility.
type BootstrapServiceServer interface {
	AddNode(context.Context, *IPAddress) (*IPAddress, error)
	RemoveNode(context.Context, *IPAddress) (*Bool, error)
	FindActiveNode(context.Context, *AddressList) (*IPAddress, error)
	mustEmbedUnimplementedBootstrapServiceServer()
}

// UnimplementedBootstrapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBootstrapServiceServer struct{}

func (UnimplementedBootstrapServiceServer) AddNode(context.Context, *IPAddress) (*IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedBootstrapServiceServer) RemoveNode(context.Context, *IPAddress) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedBootstrapServiceServer) FindActiveNode(context.Context, *AddressList) (*IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindActiveNode not implemented")
}
func (UnimplementedBootstrapServiceServer) mustEmbedUnimplementedBootstrapServiceServer() {}
func (UnimplementedBootstrapServiceServer) testEmbeddedByValue()                          {}

// UnsafeBootstrapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BootstrapServiceServer will
// result in compilation errors.
type UnsafeBootstrapServiceServer interface {
	mustEmbedUnimplementedBootstrapServiceServer()
}

func RegisterBootstrapServiceServer(s grpc.ServiceRegistrar, srv BootstrapServiceServer) {
	// If the following call pancis, it indicates UnimplementedBootstrapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BootstrapService_ServiceDesc, srv)
}

func _BootstrapService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_AddNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).AddNode(ctx, req.(*IPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_RemoveNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).RemoveNode(ctx, req.(*IPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _BootstrapService_FindActiveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BootstrapServiceServer).FindActiveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BootstrapService_FindActiveNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BootstrapServiceServer).FindActiveNode(ctx, req.(*AddressList))
	}
	return interceptor(ctx, in, info, handler)
}

// BootstrapService_ServiceDesc is the grpc.ServiceDesc for BootstrapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BootstrapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BootstrapService",
	HandlerType: (*BootstrapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addNode",
			Handler:    _BootstrapService_AddNode_Handler,
		},
		{
			MethodName: "removeNode",
			Handler:    _BootstrapService_RemoveNode_Handler,
		},
		{
			MethodName: "findActiveNode",
			Handler:    _BootstrapService_FindActiveNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/can.proto",
}

const (
	NodeService_AddNode_FullMethodName                    = "/proto.NodeService/addNode"
	NodeService_HeartBeat_FullMethodName                  = "/proto.NodeService/heartBeat"
	NodeService_AddResource_FullMethodName                = "/proto.NodeService/addResource"
	NodeService_GetResource_FullMethodName                = "/proto.NodeService/getResource"
	NodeService_DeleteResource_FullMethodName             = "/proto.NodeService/deleteResource"
	NodeService_UnionZone_FullMethodName                  = "/proto.NodeService/unionZone"
	NodeService_EntrustResources_FullMethodName           = "/proto.NodeService/entrustResources"
	NodeService_SplitZone_FullMethodName                  = "/proto.NodeService/splitZone"
	NodeService_UpdateZone_FullMethodName                 = "/proto.NodeService/updateZone"
	NodeService_RemoveNodeAsNeighbour_FullMethodName      = "/proto.NodeService/removeNodeAsNeighbour"
	NodeService_AddResourceToBackupNode_FullMethodName    = "/proto.NodeService/addResourceToBackupNode"
	NodeService_DeleteResourceToBackupNode_FullMethodName = "/proto.NodeService/deleteResourceToBackupNode"
	NodeService_HeartBeatBackup_FullMethodName            = "/proto.NodeService/heartBeatBackup"
	NodeService_DeleteResourcesBackup_FullMethodName      = "/proto.NodeService/deleteResourcesBackup"
	NodeService_AddResourcesBackup_FullMethodName         = "/proto.NodeService/addResourcesBackup"
	NodeService_DeleteAllResourcesBackup_FullMethodName   = "/proto.NodeService/deleteAllResourcesBackup"
	NodeService_Takeover_FullMethodName                   = "/proto.NodeService/takeover"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	AddNode(ctx context.Context, in *NewNodeInformation, opts ...grpc.CallOption) (*InformationToAddNode, error)
	HeartBeat(ctx context.Context, in *HeartBeatMessage, opts ...grpc.CallOption) (*HeartBeatMessage, error)
	AddResource(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*IPAddress, error)
	GetResource(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Resource, error)
	DeleteResource(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IPAddress, error)
	UnionZone(ctx context.Context, in *InformationToAddNode, opts ...grpc.CallOption) (*Bool, error)
	EntrustResources(ctx context.Context, in *Resources, opts ...grpc.CallOption) (*Bool, error)
	SplitZone(ctx context.Context, in *NewNodeInformation, opts ...grpc.CallOption) (*InformationToAddNode, error)
	UpdateZone(ctx context.Context, in *Coordinate, opts ...grpc.CallOption) (*Bool, error)
	RemoveNodeAsNeighbour(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*Bool, error)
	AddResourceToBackupNode(ctx context.Context, in *AddBackup, opts ...grpc.CallOption) (*Bool, error)
	DeleteResourceToBackupNode(ctx context.Context, in *DeleteBackup, opts ...grpc.CallOption) (*Bool, error)
	HeartBeatBackup(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*Bool, error)
	DeleteResourcesBackup(ctx context.Context, in *ResourcesBackup, opts ...grpc.CallOption) (*Bool, error)
	AddResourcesBackup(ctx context.Context, in *ResourcesBackup, opts ...grpc.CallOption) (*Bool, error)
	DeleteAllResourcesBackup(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*Bool, error)
	Takeover(ctx context.Context, in *TakeoverMessage, opts ...grpc.CallOption) (*Bool, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) AddNode(ctx context.Context, in *NewNodeInformation, opts ...grpc.CallOption) (*InformationToAddNode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InformationToAddNode)
	err := c.cc.Invoke(ctx, NodeService_AddNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) HeartBeat(ctx context.Context, in *HeartBeatMessage, opts ...grpc.CallOption) (*HeartBeatMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartBeatMessage)
	err := c.cc.Invoke(ctx, NodeService_HeartBeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) AddResource(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*IPAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAddress)
	err := c.cc.Invoke(ctx, NodeService_AddResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) GetResource(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Resource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Resource)
	err := c.cc.Invoke(ctx, NodeService_GetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DeleteResource(ctx context.Context, in *Key, opts ...grpc.CallOption) (*IPAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IPAddress)
	err := c.cc.Invoke(ctx, NodeService_DeleteResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) UnionZone(ctx context.Context, in *InformationToAddNode, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_UnionZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) EntrustResources(ctx context.Context, in *Resources, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_EntrustResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) SplitZone(ctx context.Context, in *NewNodeInformation, opts ...grpc.CallOption) (*InformationToAddNode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InformationToAddNode)
	err := c.cc.Invoke(ctx, NodeService_SplitZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) UpdateZone(ctx context.Context, in *Coordinate, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_UpdateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) RemoveNodeAsNeighbour(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_RemoveNodeAsNeighbour_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) AddResourceToBackupNode(ctx context.Context, in *AddBackup, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_AddResourceToBackupNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DeleteResourceToBackupNode(ctx context.Context, in *DeleteBackup, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_DeleteResourceToBackupNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) HeartBeatBackup(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_HeartBeatBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DeleteResourcesBackup(ctx context.Context, in *ResourcesBackup, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_DeleteResourcesBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) AddResourcesBackup(ctx context.Context, in *ResourcesBackup, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_AddResourcesBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) DeleteAllResourcesBackup(ctx context.Context, in *IPAddress, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_DeleteAllResourcesBackup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeServiceClient) Takeover(ctx context.Context, in *TakeoverMessage, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, NodeService_Takeover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations must embed UnimplementedNodeServiceServer
// for forward compatibility.
type NodeServiceServer interface {
	AddNode(context.Context, *NewNodeInformation) (*InformationToAddNode, error)
	HeartBeat(context.Context, *HeartBeatMessage) (*HeartBeatMessage, error)
	AddResource(context.Context, *Resource) (*IPAddress, error)
	GetResource(context.Context, *Key) (*Resource, error)
	DeleteResource(context.Context, *Key) (*IPAddress, error)
	UnionZone(context.Context, *InformationToAddNode) (*Bool, error)
	EntrustResources(context.Context, *Resources) (*Bool, error)
	SplitZone(context.Context, *NewNodeInformation) (*InformationToAddNode, error)
	UpdateZone(context.Context, *Coordinate) (*Bool, error)
	RemoveNodeAsNeighbour(context.Context, *IPAddress) (*Bool, error)
	AddResourceToBackupNode(context.Context, *AddBackup) (*Bool, error)
	DeleteResourceToBackupNode(context.Context, *DeleteBackup) (*Bool, error)
	HeartBeatBackup(context.Context, *IPAddress) (*Bool, error)
	DeleteResourcesBackup(context.Context, *ResourcesBackup) (*Bool, error)
	AddResourcesBackup(context.Context, *ResourcesBackup) (*Bool, error)
	DeleteAllResourcesBackup(context.Context, *IPAddress) (*Bool, error)
	Takeover(context.Context, *TakeoverMessage) (*Bool, error)
	mustEmbedUnimplementedNodeServiceServer()
}

// UnimplementedNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNodeServiceServer struct{}

func (UnimplementedNodeServiceServer) AddNode(context.Context, *NewNodeInformation) (*InformationToAddNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedNodeServiceServer) HeartBeat(context.Context, *HeartBeatMessage) (*HeartBeatMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedNodeServiceServer) AddResource(context.Context, *Resource) (*IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedNodeServiceServer) GetResource(context.Context, *Key) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedNodeServiceServer) DeleteResource(context.Context, *Key) (*IPAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedNodeServiceServer) UnionZone(context.Context, *InformationToAddNode) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnionZone not implemented")
}
func (UnimplementedNodeServiceServer) EntrustResources(context.Context, *Resources) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EntrustResources not implemented")
}
func (UnimplementedNodeServiceServer) SplitZone(context.Context, *NewNodeInformation) (*InformationToAddNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitZone not implemented")
}
func (UnimplementedNodeServiceServer) UpdateZone(context.Context, *Coordinate) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZone not implemented")
}
func (UnimplementedNodeServiceServer) RemoveNodeAsNeighbour(context.Context, *IPAddress) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNodeAsNeighbour not implemented")
}
func (UnimplementedNodeServiceServer) AddResourceToBackupNode(context.Context, *AddBackup) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceToBackupNode not implemented")
}
func (UnimplementedNodeServiceServer) DeleteResourceToBackupNode(context.Context, *DeleteBackup) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceToBackupNode not implemented")
}
func (UnimplementedNodeServiceServer) HeartBeatBackup(context.Context, *IPAddress) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeatBackup not implemented")
}
func (UnimplementedNodeServiceServer) DeleteResourcesBackup(context.Context, *ResourcesBackup) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourcesBackup not implemented")
}
func (UnimplementedNodeServiceServer) AddResourcesBackup(context.Context, *ResourcesBackup) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourcesBackup not implemented")
}
func (UnimplementedNodeServiceServer) DeleteAllResourcesBackup(context.Context, *IPAddress) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllResourcesBackup not implemented")
}
func (UnimplementedNodeServiceServer) Takeover(context.Context, *TakeoverMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Takeover not implemented")
}
func (UnimplementedNodeServiceServer) mustEmbedUnimplementedNodeServiceServer() {}
func (UnimplementedNodeServiceServer) testEmbeddedByValue()                     {}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNodeInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_AddNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).AddNode(ctx, req.(*NewNodeInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).HeartBeat(ctx, req.(*HeartBeatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).AddResource(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).GetResource(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).DeleteResource(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_UnionZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformationToAddNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).UnionZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_UnionZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).UnionZone(ctx, req.(*InformationToAddNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_EntrustResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).EntrustResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_EntrustResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).EntrustResources(ctx, req.(*Resources))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_SplitZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNodeInformation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SplitZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_SplitZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SplitZone(ctx, req.(*NewNodeInformation))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Coordinate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_UpdateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).UpdateZone(ctx, req.(*Coordinate))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_RemoveNodeAsNeighbour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).RemoveNodeAsNeighbour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_RemoveNodeAsNeighbour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).RemoveNodeAsNeighbour(ctx, req.(*IPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_AddResourceToBackupNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBackup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).AddResourceToBackupNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_AddResourceToBackupNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).AddResourceToBackupNode(ctx, req.(*AddBackup))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DeleteResourceToBackupNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).DeleteResourceToBackupNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_DeleteResourceToBackupNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).DeleteResourceToBackupNode(ctx, req.(*DeleteBackup))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_HeartBeatBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).HeartBeatBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_HeartBeatBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).HeartBeatBackup(ctx, req.(*IPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DeleteResourcesBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourcesBackup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).DeleteResourcesBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_DeleteResourcesBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).DeleteResourcesBackup(ctx, req.(*ResourcesBackup))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_AddResourcesBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourcesBackup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).AddResourcesBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_AddResourcesBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).AddResourcesBackup(ctx, req.(*ResourcesBackup))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_DeleteAllResourcesBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).DeleteAllResourcesBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_DeleteAllResourcesBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).DeleteAllResourcesBackup(ctx, req.(*IPAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeService_Takeover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeoverMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).Takeover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_Takeover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).Takeover(ctx, req.(*TakeoverMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addNode",
			Handler:    _NodeService_AddNode_Handler,
		},
		{
			MethodName: "heartBeat",
			Handler:    _NodeService_HeartBeat_Handler,
		},
		{
			MethodName: "addResource",
			Handler:    _NodeService_AddResource_Handler,
		},
		{
			MethodName: "getResource",
			Handler:    _NodeService_GetResource_Handler,
		},
		{
			MethodName: "deleteResource",
			Handler:    _NodeService_DeleteResource_Handler,
		},
		{
			MethodName: "unionZone",
			Handler:    _NodeService_UnionZone_Handler,
		},
		{
			MethodName: "entrustResources",
			Handler:    _NodeService_EntrustResources_Handler,
		},
		{
			MethodName: "splitZone",
			Handler:    _NodeService_SplitZone_Handler,
		},
		{
			MethodName: "updateZone",
			Handler:    _NodeService_UpdateZone_Handler,
		},
		{
			MethodName: "removeNodeAsNeighbour",
			Handler:    _NodeService_RemoveNodeAsNeighbour_Handler,
		},
		{
			MethodName: "addResourceToBackupNode",
			Handler:    _NodeService_AddResourceToBackupNode_Handler,
		},
		{
			MethodName: "deleteResourceToBackupNode",
			Handler:    _NodeService_DeleteResourceToBackupNode_Handler,
		},
		{
			MethodName: "heartBeatBackup",
			Handler:    _NodeService_HeartBeatBackup_Handler,
		},
		{
			MethodName: "deleteResourcesBackup",
			Handler:    _NodeService_DeleteResourcesBackup_Handler,
		},
		{
			MethodName: "addResourcesBackup",
			Handler:    _NodeService_AddResourcesBackup_Handler,
		},
		{
			MethodName: "deleteAllResourcesBackup",
			Handler:    _NodeService_DeleteAllResourcesBackup_Handler,
		},
		{
			MethodName: "takeover",
			Handler:    _NodeService_Takeover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/can.proto",
}
